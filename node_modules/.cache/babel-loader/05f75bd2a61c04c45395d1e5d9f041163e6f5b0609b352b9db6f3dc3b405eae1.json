{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sakala\\\\ibm-final-demos-may-2024\\\\03-ibm-frontend-react\\\\src\\\\components\\\\user\\\\Register.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport UserService from \"../../services/UserService\";\nimport { useDispatch } from \"react-redux\";\nimport { userRegister } from \"../../redux/UserSlice\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  const [registerData, setRegisterData] = useState({\n    username: '',\n    password: ''\n  });\n  const [afterRegisterMessage, setAfterRegisterMessage] = useState('');\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const handleChange = evt => {\n    console.log(evt.target.name);\n    console.log(evt.target.value);\n    setRegisterData({\n      ...registerData,\n      [evt.target.name]: evt.target.value\n    });\n  };\n  const checkUserExists = async username => {\n    try {\n      // Check if a user with the provided username exists\n      const existingUser = await User.findOne({\n        username\n      });\n      return existingUser !== null;\n    } catch (error) {\n      // Handle any errors that occur during the query\n      console.error(\"Error checking user existence:\", error);\n      throw error;\n    }\n  };\n  const handleRegisterSubmit = async evt => {\n    evt.preventDefault();\n    console.log(registerData);\n    const {\n      username\n    } = registerData;\n    const userExists = await checkUserExists(username);\n    if (userExists) {\n      setAfterRegisterMessage(`User ${username} already exist`);\n    } else {\n      UserService.registerUser(registerData).then(response => {\n        console.log(response);\n        dispatch(userRegister(response));\n        setRegisterData({\n          username: '',\n          password: ''\n        });\n        setAfterRegisterMessage(`Hi ${response.username}! You've registered successfully!`);\n        setTimeout(() => {\n          navigate('/login');\n        }, 2000);\n      }).catch(error => {\n        console.log(error);\n        setAfterRegisterMessage(`Invalid credentials!`);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Register Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Register here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleRegisterSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"username\",\n        value: registerData.username,\n        onChange: handleChange,\n        autoFocus: true,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        value: registerData.password,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [afterRegisterMessage && afterRegisterMessage, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Already registered? \", /*#__PURE__*/_jsxDEV(Link, {\n        to: '/login',\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 36\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Register, \"Y+1pSLZ2iUQa/YOaEZ2pHKt5hoI=\", false, function () {\n  return [useNavigate, useDispatch];\n});\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["useState","Link","useNavigate","UserService","useDispatch","userRegister","jsxDEV","_jsxDEV","Fragment","_Fragment","Register","_s","registerData","setRegisterData","username","password","afterRegisterMessage","setAfterRegisterMessage","navigate","dispatch","handleChange","evt","console","log","target","name","value","checkUserExists","existingUser","User","findOne","error","handleRegisterSubmit","preventDefault","userExists","registerUser","then","response","setTimeout","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","autoFocus","required","to","_c","$RefreshReg$"],"sources":["C:/Sakala/ibm-final-demos-may-2024/03-ibm-frontend-react/src/components/user/Register.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport UserService from \"../../services/UserService\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { userRegister } from \"../../redux/UserSlice\";\r\n\r\nconst Register = () => {\r\n\r\n    const [registerData, setRegisterData] = useState({ username: '', password: '' });\r\n    const [afterRegisterMessage, setAfterRegisterMessage] = useState('');\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = (evt) => {\r\n        console.log(evt.target.name);\r\n        console.log(evt.target.value);\r\n        setRegisterData({\r\n            ...registerData,\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n    };\r\n\r\n    const checkUserExists = async (username) => {\r\n        try {\r\n            // Check if a user with the provided username exists\r\n            const existingUser = await User.findOne({ username });\r\n            return existingUser !== null;\r\n        } catch (error) {\r\n            // Handle any errors that occur during the query\r\n            console.error(\"Error checking user existence:\", error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const handleRegisterSubmit = async (evt) => {\r\n        evt.preventDefault();\r\n        console.log(registerData);\r\n        const {username} = registerData;\r\n\r\n        const userExists = await checkUserExists(username);\r\n\r\n        if(userExists){\r\n            setAfterRegisterMessage(`User ${username} already exist`);\r\n        } else{\r\n        UserService.registerUser(registerData)\r\n            .then((response) => {\r\n                console.log(response);\r\n                dispatch(userRegister(response));\r\n                setRegisterData({ username: '', password: '' });\r\n                setAfterRegisterMessage(`Hi ${response.username}! You've registered successfully!`);\r\n                setTimeout(() => {\r\n                    navigate('/login');\r\n                }, 2000);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                setAfterRegisterMessage(`Invalid credentials!`);\r\n            });\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h1>Register Component</h1>\r\n            <p>Register here</p>\r\n            <form onSubmit={handleRegisterSubmit}>\r\n                <input type=\"text\" name=\"username\" value={registerData.username}\r\n                    onChange={handleChange} autoFocus required />\r\n                <br />\r\n                <input type=\"password\" name=\"password\" value={registerData.password}\r\n                    onChange={handleChange} required />\r\n                <br />\r\n                <input type=\"submit\" value=\"Register\" />\r\n            </form>\r\n            <>\r\n                <p>{afterRegisterMessage && afterRegisterMessage} </p>\r\n            </>\r\n            <p>Already registered? <Link to={'/login'}>Login</Link> </p>\r\n\r\n        </>\r\n    );\r\n};\r\nexport default Register;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}